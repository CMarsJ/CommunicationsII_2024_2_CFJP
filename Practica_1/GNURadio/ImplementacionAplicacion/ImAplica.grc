options:
  parameters:
    author: "CARLOS_CARRE\xD1O_JUAN_PINTO"
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Lab_Comu_II_APLI
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Lab_Comu_II_APLI
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Puntos
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 84.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 4.0]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.5'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 316.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '4'
    comment: ''
    freq: '50'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '-2'
    phase: '1.57'
    samp_rate: samp_rate
    showports: 'False'
    type: float
    waveform: analog.GR_TRI_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 152.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 256.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '40'
    max_iter: '60'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '0.1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 396.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 1/3
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 424.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 252.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__( self ):\
      \ # only default arguments here\n        gr.sync_block.__init__(\n        self\
      \ ,\n        name = 'Promedios_de_tiempos', # will show up in GRC\n        in_sig\
      \ =[ np.float32 ],\n        out_sig =[ np.float32 ,np.float32 ,np.float32 ,np.float32\
      \ ])\n        self.acum_anterior = 0\n        self.Ntotales = 0\n        self.acum_anterior1\
      \ = 0\n        self.acum_anterior2 = 0\n\n    def work(self , input_items ,\
      \ output_items ):\n        x = input_items[0] # Senial de entrada .\n      \
      \  y0 = output_items[0] # Promedio de la senial\n        y1 = output_items[1]\
      \ # Media de la senial\n        y2 = output_items[2] # RMS de la senial\n  \
      \      y3 = output_items[3] # Desviacion estandar de la senial\n\n        #\
      \ Calculo del promedio\n        N = len(x)\n        self.Ntotales = self.Ntotales\
      \ + N\n        acumulado = self.acum_anterior + np.cumsum(x)\n        self.acum_anterior\
      \ = acumulado[N-1]\n        y0[:]= acumulado/self.Ntotales\n\n        # Calculo\
      \ de la potencia promedio \n        x2=np.multiply(x,x)\n        acumulado1\
      \ = self.acum_anterior1 + np.cumsum(x2)\n        self.acum_anterior1 = acumulado1[N\
      \ -1]\n        y1[:] = acumulado1/self.Ntotales\n\n        # Calculo de la RMS\n\
      \        y2[:] = np.sqrt(y1)\n\n        # Calculo de la desviacion estandar\n\
      \        x3 = np.multiply(x-y0 ,x-y0)\n        acumulado2 = self.acum_anterior2\
      \ + np.cumsum(x3)\n        self.acum_anterior2 = acumulado2[N -1]\n        y3[:]\
      \ = np.sqrt( acumulado2/self.Ntotales )\n        return len(x)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Promedios_de_tiempos', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1), ('1', 'float', 1), ('2', 'float', 1), ('3', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 248.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__( self ):\
      \ # only default arguments here\n        gr.sync_block.__init__(\n        self\
      \ ,\n        name = 'Promedios_de_tiempos', # will show up in GRC\n        in_sig\
      \ =[ np.float32 ],\n        out_sig =[ np.float32 ,np.float32 ,np.float32 ,np.float32\
      \ ])\n        self.acum_anterior = 0\n        self.Ntotales = 0\n        self.acum_anterior1\
      \ = 0\n        self.acum_anterior2 = 0\n\n    def work(self , input_items ,\
      \ output_items ):\n        x = input_items[0] # Senial de entrada .\n      \
      \  y0 = output_items[0] # Promedio de la senial\n        y1 = output_items[1]\
      \ # Media de la senial\n        y2 = output_items[2] # RMS de la senial\n  \
      \      y3 = output_items[3] # Desviacion estandar de la senial\n\n        #\
      \ Calculo del promedio\n        N = len(x)\n        self.Ntotales = self.Ntotales\
      \ + N\n        acumulado = self.acum_anterior + np.cumsum(x)\n        self.acum_anterior\
      \ = acumulado[N-1]\n        y0[:]= acumulado/self.Ntotales\n\n        # Calculo\
      \ de la potencia promedio \n        x2=np.multiply(x,x)\n        acumulado1\
      \ = self.acum_anterior1 + np.cumsum(x2)\n        self.acum_anterior1 = acumulado1[N\
      \ -1]\n        y1[:] = acumulado1/self.Ntotales\n\n        # Calculo de la RMS\n\
      \        y2[:] = np.sqrt(y1)\n\n        # Calculo de la desviacion estandar\n\
      \        x3 = np.multiply(x-y0 ,x-y0)\n        acumulado2 = self.acum_anterior2\
      \ + np.cumsum(x3)\n        self.acum_anterior2 = acumulado2[N -1]\n        y3[:]\
      \ = np.sqrt( acumulado2/self.Ntotales )\n        return len(x)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Promedios_de_tiempos', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1), ('1', 'float', 1), ('2', 'float', 1), ('3', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 624.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__( self ):\
      \ # only default arguments here\n        gr.sync_block.__init__(\n        self\
      \ ,\n        name = 'Promedios_de_tiempos', # will show up in GRC\n        in_sig\
      \ =[ np.float32 ],\n        out_sig =[ np.float32 ,np.float32 ,np.float32 ,np.float32\
      \ ])\n        self.acum_anterior = 0\n        self.Ntotales = 0\n        self.acum_anterior1\
      \ = 0\n        self.acum_anterior2 = 0\n\n    def work(self , input_items ,\
      \ output_items ):\n        x = input_items[0] # Senial de entrada .\n      \
      \  y0 = output_items[0] # Promedio de la senial\n        y1 = output_items[1]\
      \ # Media de la senial\n        y2 = output_items[2] # RMS de la senial\n  \
      \      y3 = output_items[3] # Desviacion estandar de la senial\n\n        #\
      \ Calculo del promedio\n        N = len(x)\n        self.Ntotales = self.Ntotales\
      \ + N\n        acumulado = self.acum_anterior + np.cumsum(x)\n        self.acum_anterior\
      \ = acumulado[N-1]\n        y0[:]= acumulado/self.Ntotales\n\n        # Calculo\
      \ de la potencia promedio \n        x2=np.multiply(x,x)\n        acumulado1\
      \ = self.acum_anterior1 + np.cumsum(x2)\n        self.acum_anterior1 = acumulado1[N\
      \ -1]\n        y1[:] = acumulado1/self.Ntotales\n\n        # Calculo de la RMS\n\
      \        y2[:] = np.sqrt(y1)\n\n        # Calculo de la desviacion estandar\n\
      \        x3 = np.multiply(x-y0 ,x-y0)\n        acumulado2 = self.acum_anterior2\
      \ + np.cumsum(x3)\n        self.acum_anterior2 = acumulado2[N -1]\n        y3[:]\
      \ = np.sqrt( acumulado2/self.Ntotales )\n        return len(x)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Promedios_de_tiempos', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1), ('1', 'float', 1), ('2', 'float', 1), ('3', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 424.0]
    rotation: 0
    state: enabled
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk(gr.sync_block ):\n    def __init__ ( self\
      \ ) : # only default arguments here\n        gr.sync_block.__init__ (\n    \
      \    self ,\n        name =\"e_Acum2\", # will show up in GRC\n        in_sig\
      \ =[ np.float32 ],\n        out_sig =[ np.float32 ])\n        self.acumulado_anterior\
      \ = 0  # Para almacenar el valor acumulado hasta el momento\n\n    def work(self,\
      \ input_items, output_items):\n        x = input_items[0]  # Senal de entrada\n\
      \        y = output_items[0]  # Senal acumulada\n        N = len(x)\n\n    \
      \    # Calcular el acumulado, continuando desde el valor acumulado anterior\n\
      \        y[:] = (np.cumsum(x) + self.acumulado_anterior) \n        # Guardar\
      \ el valor acumulado para el siguiente bloque\n        self.acumulado_anterior\
      \ = y[N-1]  # El ultimo valor acumulado se guarda\n\n        return len(y)\n\
      #    def work (self , input_items , output_items ):\n#        x = input_items[0]\
      \ # Senial de entrada .\n#        y0 = output_items[0] # Senial acumulada\n\
      #        y0[:] = np.cumsum(x)\n        #y0 [:] = len(y0)\n#        return len(y0)"
    affinity: ''
    alias: ''
    comment: Acumulador
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Acum2', 'blk', [], [('0', 'float', 1)], [('0', 'float', 1)], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 432.0]
    rotation: 0
    state: enabled
- name: epy_block_0_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\n\nclass blk(gr.sync_block):\n    def __init__( self ):\
      \ # only default arguments here\n        gr.sync_block.__init__(\n        self\
      \ ,\n        name = 'Promedios_de_tiempos', # will show up in GRC\n        in_sig\
      \ =[ np.float32 ],\n        out_sig =[ np.float32 ,np.float32 ,np.float32 ,np.float32\
      \ ])\n        self.acum_anterior = 0\n        self.Ntotales = 0\n        self.acum_anterior1\
      \ = 0\n        self.acum_anterior2 = 0\n\n    def work(self , input_items ,\
      \ output_items ):\n        x = input_items[0] # Senial de entrada .\n      \
      \  y0 = output_items[0] # Promedio de la senial\n        y1 = output_items[1]\
      \ # Media de la senial\n        y2 = output_items[2] # RMS de la senial\n  \
      \      y3 = output_items[3] # Desviacion estandar de la senial\n\n        #\
      \ Calculo del promedio\n        N = len(x)\n        self.Ntotales = self.Ntotales\
      \ + N\n        acumulado = self.acum_anterior + np.cumsum(x)\n        self.acum_anterior\
      \ = acumulado[N-1]\n        y0[:]= acumulado/self.Ntotales\n\n        # Calculo\
      \ de la potencia promedio \n        x2=np.multiply(x,x)\n        acumulado1\
      \ = self.acum_anterior1 + np.cumsum(x2)\n        self.acum_anterior1 = acumulado1[N\
      \ -1]\n        y1[:] = acumulado1/self.Ntotales\n\n        # Calculo de la RMS\n\
      \        y2[:] = np.sqrt(y1)\n\n        # Calculo de la desviacion estandar\n\
      \        x3 = np.multiply(x-y0 ,x-y0)\n        acumulado2 = self.acum_anterior2\
      \ + np.cumsum(x3)\n        self.acum_anterior2 = acumulado2[N -1]\n        y3[:]\
      \ = np.sqrt( acumulado2/self.Ntotales )\n        return len(x)"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Promedios_de_tiempos', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1), ('1', 'float', 1), ('2', 'float', 1), ('3', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 112.0]
    rotation: 0
    state: enabled
- name: epy_block_1_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\nimport numpy as np\nfrom\
      \ gnuradio import gr\nclass blk(gr.sync_block ):\n\tdef __init__( self ) : #\
      \ only default arguments here\n\t\tgr.sync_block.__init__ (\n\t\t\tself ,\n\t\
      \t\tname =\"e_Diff2\" , # will show up in GRC\n\t\t\tin_sig =[ np.float32 ],\n\
      \t\t\tout_sig =[ np.float32 ]\n\t\t)\n\t\tself.anterior = 0\n\tdef work(self\
      \ , input_items , output_items ):\n\t\tx = input_items[0]  # Senal de entrada\n\
      \t\ty = output_items[0]  # Senal diferenciada\n\t\tN = len(x)\n\n        # Calcular\
      \ la diferencia entre valores consecutivos\n\t\ty[0] = x[0] - self.anterior\
      \  # Diferencia con el valor anterior\n\t\ty[1:] = np.diff(x)  # Diferencia\
      \ entre valores consecutivos de la senal\n\n        # Actualizar el valor anterior\
      \ para el siguiente bloque de procesamiento\n\t\tself.anterior = x[-1]\n\t\t\
      \n\t\treturn len(y)\n"
    affinity: ''
    alias: ''
    comment: Diferenciador
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Diff2', 'blk', [], [('0', 'float', 1)], [('0', 'float', 1)], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 432.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "red")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: (2,1,1,1)
    label1: '"Promedio(Media)"'
    label10: ''
    label2: '"Media cuadratica"'
    label3: '"Rms"'
    label4: '"Desviacion"'
    label5: '"Desviacion"'
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: "\"Se\xF1al Ruido\""
    nconnections: '4'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 248.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0_0
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "red")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: (2,2,1,1)
    label1: '"Promedio(Media)"'
    label10: ''
    label2: '"Media cuadratica"'
    label3: '"Rms"'
    label4: '"Desviacion"'
    label5: '"Desviacion"'
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: '"Acumulador"'
    nconnections: '4'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 624.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0_1
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "red")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: (2,3,1,1)
    label1: '"Promedio(Media)"'
    label10: ''
    label2: '"Media cuadratica"'
    label3: '"Rms"'
    label4: '"Desviacion"'
    label5: '"Desviacion"'
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: "\"Se\xF1al Filtrada\""
    nconnections: '4'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 424.0]
    rotation: 0
    state: enabled
- name: qtgui_number_sink_0_2
  id: qtgui_number_sink
  parameters:
    affinity: ''
    alias: ''
    autoscale: 'True'
    avg: '0'
    color1: ("black", "red")
    color10: ("black", "black")
    color2: ("black", "black")
    color3: ("black", "black")
    color4: ("black", "black")
    color5: ("black", "black")
    color6: ("black", "black")
    color7: ("black", "black")
    color8: ("black", "black")
    color9: ("black", "black")
    comment: ''
    factor1: '1'
    factor10: '1'
    factor2: '1'
    factor3: '1'
    factor4: '1'
    factor5: '1'
    factor6: '1'
    factor7: '1'
    factor8: '1'
    factor9: '1'
    graph_type: qtgui.NUM_GRAPH_HORIZ
    gui_hint: (2,0,1,1)
    label1: '"Promedio(Media)"'
    label10: ''
    label2: '"Media cuadratica"'
    label3: '"Rms"'
    label4: '"Desviacion"'
    label5: '"Desviacion"'
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    max: '1'
    min: '-1'
    name: "\"Se\xF1al Original\""
    nconnections: '4'
    type: float
    unit1: ''
    unit10: ''
    unit2: ''
    unit3: ''
    unit4: ''
    unit5: ''
    unit6: ''
    unit7: ''
    unit8: ''
    unit9: ''
    update_time: '0.10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 112.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: black
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'True'
    gui_hint: (0,0,1,2)
    label1: Original
    label10: Signal 10
    label2: Con Ruido
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Original"'
    nconnections: '2'
    size: Puntos
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.5'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '6'
    ymin: '-6'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 4.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: (0,2,1,2)
    label1: Signal 4
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Filtrada"'
    nconnections: '1'
    size: Puntos
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.5'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-4'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, 316.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'False'
    grid: 'True'
    gui_hint: (1,0,1,2)
    label1: Signal 4
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Acumulador"'
    nconnections: '1'
    size: Puntos
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.5'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-4'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 508.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: (1,2,1,2)
    label1: Signal 4
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Ventana"'
    nconnections: '1'
    size: Puntos
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.5'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-4'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 508.0]
    rotation: 0
    state: enabled

connections:
- [analog_noise_source_x_0, '0', blocks_add_xx_0, '1']
- [analog_sig_source_x_0, '0', blocks_add_xx_0, '0']
- [analog_sig_source_x_0, '0', epy_block_0_3, '0']
- [analog_sig_source_x_0, '0', qtgui_time_sink_x_0_0, '1']
- [blocks_add_xx_0, '0', blocks_throttle2_0, '0']
- [blocks_moving_average_xx_0, '0', epy_block_1_1, '0']
- [blocks_moving_average_xx_0, '0', qtgui_time_sink_x_0_0_0_0_0, '0']
- [blocks_multiply_const_vxx_0, '0', epy_block_0_1, '0']
- [blocks_multiply_const_vxx_0, '0', qtgui_time_sink_x_0_0_0, '0']
- [blocks_throttle2_0, '0', epy_block_0, '0']
- [blocks_throttle2_0, '0', epy_block_0_2, '0']
- [blocks_throttle2_0, '0', qtgui_time_sink_x_0_0, '0']
- [epy_block_0, '0', qtgui_number_sink_0, '0']
- [epy_block_0, '1', qtgui_number_sink_0, '1']
- [epy_block_0, '2', qtgui_number_sink_0, '2']
- [epy_block_0, '3', qtgui_number_sink_0, '3']
- [epy_block_0_0, '0', qtgui_number_sink_0_0, '0']
- [epy_block_0_0, '1', qtgui_number_sink_0_0, '1']
- [epy_block_0_0, '2', qtgui_number_sink_0_0, '2']
- [epy_block_0_0, '3', qtgui_number_sink_0_0, '3']
- [epy_block_0_1, '0', qtgui_number_sink_0_1, '0']
- [epy_block_0_1, '1', qtgui_number_sink_0_1, '1']
- [epy_block_0_1, '2', qtgui_number_sink_0_1, '2']
- [epy_block_0_1, '3', qtgui_number_sink_0_1, '3']
- [epy_block_0_2, '0', blocks_moving_average_xx_0, '0']
- [epy_block_0_2, '0', epy_block_0_0, '0']
- [epy_block_0_2, '0', qtgui_time_sink_x_0_0_0_0, '0']
- [epy_block_0_3, '0', qtgui_number_sink_0_2, '0']
- [epy_block_0_3, '1', qtgui_number_sink_0_2, '1']
- [epy_block_0_3, '2', qtgui_number_sink_0_2, '2']
- [epy_block_0_3, '3', qtgui_number_sink_0_2, '3']
- [epy_block_1_1, '0', blocks_multiply_const_vxx_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
